{"version":3,"sources":["components/card/Card.js","components/cardList/CardList.js","components/searchBox/Search.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","monster","react_default","a","createElement","className","src","concat","id","alt","name","email","CardList","monsters","map","card_Card","key","Search","search","handleChange","type","value","onChange","placeholder","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","_this2","setState","fetch","then","res","json","data","_this3","_this$state","filteredMonsters","filter","toLowerCase","includes","style","textAlign","searchBox_Search","e","target","cardList_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAaeA,qBAVF,SAAAC,GAAe,IAAbC,EAAaD,EAAbC,QACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAQO,GAAlC,0BAA8DC,IAAI,YAC1EP,EAAAC,EAAAC,cAAA,UAAKH,EAAQS,MACbR,EAAAC,EAAAC,cAAA,SAAIH,EAAQU,UCKTC,EATE,SAAAZ,GAAgB,IAAda,EAAcb,EAAda,SACjB,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZQ,EAASC,IAAI,SAAAb,GAAO,OACjBC,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKf,EAAQO,GAAIP,QAASA,QCQ7BgB,SAbA,SAAAjB,GAA4B,IAA1BkB,EAA0BlB,EAA1BkB,OAAQC,EAAkBnB,EAAlBmB,aACrB,OACIjB,EAAAC,EAAAC,cAAA,SACIgB,KAAK,OACLV,KAAK,SACLL,UAAU,SACVgB,MAAOH,EACPI,SAAUH,EACVI,YAAY,2BC4CTC,cAhDb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXnB,SAAU,GACVoB,SAAS,EACTf,OAAQ,IALCO,mFASM,IAAAS,EAAAN,KAEjBA,KAAKO,SAAS,CAACF,SAAS,IAExBG,MAAK,GAAA7B,OAHO,uCAGP,WACH8B,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACLN,EAAKC,SAAS,CACZtB,SAAU2B,EACVP,SAAS,uCAKN,IAAAQ,EAAAb,KAAAc,EAC6Bd,KAAKI,MAAlCnB,EADA6B,EACA7B,SAAUoB,EADVS,EACUT,QAASf,EADnBwB,EACmBxB,OAEpByB,EAAmB9B,EAAS+B,OAAO,SAAA3C,GAAO,OAC9CA,EAAQS,KAAKmC,cAAcC,SAAS5B,EAAO2B,iBAG7C,OAAGZ,EACM/B,EAAAC,EAAAC,cAAA,MAAI2C,MAAO,CAACC,UAAW,WAAvB,cAIL9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC6C,EAAD,CACE/B,OAAQA,EACRC,aAAc,SAAA+B,GAAC,OAAIT,EAAKN,SAAS,CAACjB,OAAQgC,EAAEC,OAAO9B,WAErDnB,EAAAC,EAAAC,cAACgD,EAAD,CAAUvC,SAAU8B,YA1CZU,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.b757f8b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = ({monster}) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n            <h2>{monster.name}</h2>\r\n            <p>{monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport Card from '../card/Card';\r\n\r\nconst CardList = ({monsters}) => {\r\n  return (\r\n      <div className=\"card-list\">\r\n        {monsters.map(monster => \r\n            <Card key={monster.id} monster={monster}/>\r\n        )}\r\n      </div>\r\n  )\r\n}\r\nexport default CardList;","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst Search = ({search, handleChange}) => {\r\n    return (  \r\n        <input \r\n            type=\"text\" \r\n            name='search' \r\n            className=\"search\"\r\n            value={search} \r\n            onChange={handleChange} \r\n            placeholder=\"Search for a monster\" \r\n        />\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport CardList from './components/cardList/CardList';\nimport Search from './components/searchBox/Search';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      loading: false,\n      search: ''\n    };\n  }\n\n  componentDidMount(){\n    const url = 'https://jsonplaceholder.typicode.com';\n    this.setState({loading: true});\n\n    fetch(`${url}/users`)\n     .then(res => res.json())\n     .then(data => {\n      this.setState({\n        monsters: data,\n        loading: false\n      })\n     });\n  }\n\n  render() {\n    const {monsters, loading, search} = this.state;\n\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(search.toLowerCase())\n    )\n\n    if(loading){\n      return <h1 style={{textAlign: 'center'}}>Loading...</h1>\n    }\n    else{\n      return (\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n          <Search \n            search={search} \n            handleChange={e => this.setState({search: e.target.value})} \n          />\n          <CardList monsters={filteredMonsters}/>\n        </div>\n      )\n    }\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}